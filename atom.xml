<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Mirko Caserta]]></title>
  <link href="http://mcaserta.github.com/atom.xml" rel="self"/>
  <link href="http://mcaserta.github.com/"/>
  <updated>2012-10-31T12:04:03+01:00</updated>
  <id>http://mcaserta.github.com/</id>
  <author>
    <name><![CDATA[Mirko Caserta]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello Scala World!]]></title>
    <link href="http://mcaserta.github.com/blog/2012/10/31/hello-scala-world/"/>
    <updated>2012-10-31T11:57:00+01:00</updated>
    <id>http://mcaserta.github.com/blog/2012/10/31/hello-scala-world</id>
    <content type="html"><![CDATA[<p>I&#8217;ve just published an <a href="https://github.com/mcaserta/hello-scala-world" title="Hello Scala World!">Hello Scala World! project on GitHub</a> that you can use to quickly setup a Scala hacking environment. This is particularly useful if you run Intellij Idea with the Scala plugin since simply opening the pom as a project will get you all the comforts you would expect in a modern ide.</p>

<p>You also get support for running <a href="http://etorreborre.github.com/specs2/">specs2 specifications</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Video Tutorial]]></title>
    <link href="http://mcaserta.github.com/blog/2012/10/30/video-tutorial/"/>
    <updated>2012-10-30T13:47:00+01:00</updated>
    <id>http://mcaserta.github.com/blog/2012/10/30/video-tutorial</id>
    <content type="html"><![CDATA[<p>Dallo scorso settembre faccio parte di <a href="http://swat.nexse.com" title="Nexse SWAT Team">un gruppo</a> interno all&#8217;azienda per cui lavoro in cui ci occupiamo di architettura del software. Uno dei nostri compiti è quello di individuare strumenti e tecnologie su cui standardizzare il processo di produzione del software e contribuirne alla diffusione.</p>

<p>Uno dei modi per diffondere innovazione è rappresentato dai nostri <a href="https://vimeo.com/nexse/">video tutorial</a>. Ora non saremo né gli Oliver Stone dei video tutorial, né gli Alan Turing dell&#8217;informatica ma, per quanto ne sappiamo, non ci sono altre aziende in Italia che pubblicano gratuitamente video in cui vengono spiegati tecnologie e strumenti realmente impiegati nel lavoro quotidiano di produzione di software professionale. Personalmente credo sia una iniziativa meritevole se non altro di maggiore pubblicità sui social media.</p>

<p>Se guardi uno dei nostri video e lo trovi utile, segnalalo ai tuoi amici, colleghi, a voce, sui social network, ecc.</p>

<p>Per praticità, ecco un elenco dei video tutorial pubblicati finora:</p>

<ul>
<li>Introduzione a Maven: <a href="https://vimeo.com/42969878">prima</a>, <a href="https://vimeo.com/43922430">seconda</a> e <a href="https://vimeo.com/51743348">terza</a> puntata</li>
<li><a href="https://vimeo.com/51150779">Introduzione a Spring Data</a></li>
<li><a href="https://vimeo.com/38038686">Introduzione a Spring Roo</a></li>
<li><a href="https://vimeo.com/39395290">Single Page Application con ExtJS</a></li>
<li><a href="https://vimeo.com/35209134">Java Debugging con Intellij Idea</a></li>
<li><a href="https://vimeo.com/30879185">Continuous Integration e Code Metrics con Jenkins e Sonar</a></li>
</ul>


<p>Buona visione.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clustering Issues?]]></title>
    <link href="http://mcaserta.github.com/blog/2012/09/24/clustering-issues/"/>
    <updated>2012-09-24T14:47:00+02:00</updated>
    <id>http://mcaserta.github.com/blog/2012/09/24/clustering-issues</id>
    <content type="html"><![CDATA[<p>The number one culprit for a non working cluster is a misconfigured /etc/hosts file. This is because of how some software implementation announces its availability on the network. Typically, if you have a resolver configured so that the domain name of your local node points to the loopback address, you have a problem.</p>

<p>Some Linux distributions (Ubuntu, I’m looking at you!) ship with an /etc/hosts that looks like this (supposing the hostname is cat and the domain name is foo.bar):</p>

<figure class='code'><figcaption><span>/etc/hosts </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1    localhost
</span><span class='line'>127.0.1.1    cat.foo.bar cat</span></code></pre></td></tr></table></div></figure>


<p>For some reason, a few software implementations use the resolver to infer the address of the node they’re running on, then start sending out messages such as “Hey, I’m available. You can find me at 127.0.1.1”, which is the problem because you want the node to advertise its availability with a real ip address (usually the one that is bound to the main network interface).</p>

<p>The solution is to get rid of the 127.0.1.1 line. You’re welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Crypto Utils 1.3.0]]></title>
    <link href="http://mcaserta.github.com/blog/2012/08/27/spring-crypto-utils-1.3.0/"/>
    <updated>2012-08-27T14:47:00+02:00</updated>
    <id>http://mcaserta.github.com/blog/2012/08/27/spring-crypto-utils-1.3.0</id>
    <content type="html"><![CDATA[<p>I’ve released a new version of Spring Crypto Utils. The project now has a gorgeous, shiny, sleek, new website on the <a href="http://springcryptoutils.com" title="Spring Crypto Utils">springcryptoutils.com</a> domain. The website is made possible thanks to the kind folks at <a href="https://github.com/" title="GitHub">GitHub</a> and their <a href="http://pages.github.com/" title="GitHub Pages">GitHub pages</a> hosting facility.</p>

<p>Please read the notes in the <a href="http://springcryptoutils.com/changelog.html" title="Spring Crypto Utils: ChangeLog">changelog</a> if you’re upgrading.</p>

<p>I must say moving to GitHub was a smart move since contributing to the project is very much easier now thanks to git pull requests. I would like to thank Chad Johnston and Martin Bosak for their contributions: respectively, <a href="https://github.com/mcaserta/spring-crypto-utils/commit/b0c7e8dab8c3f9ead869055aa460feb0dc5af4f6">the certificate element</a> and the <a href="https://github.com/mcaserta/spring-crypto-utils/commit/15f305e522bd3c85eec7cc46a50e18385f324b9e">provider attribute</a>.</p>

<p>I hope users will find the documentation easier to read. Here is an example regarding <a href="http://springcryptoutils.com/signature-m.html">digital signatures with runtime selection of multiple keys</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Carl Sagan, lo Scetticismo e l'Ingegneria del Software]]></title>
    <link href="http://mcaserta.github.com/blog/2012/05/25/sagan-scetticismo-ingegneria-software/"/>
    <updated>2012-05-25T14:47:00+02:00</updated>
    <id>http://mcaserta.github.com/blog/2012/05/25/sagan-scetticismo-ingegneria-software</id>
    <content type="html"><![CDATA[<p>Ieri sera leggevo <a href="http://www.brainpickings.org/index.php/2012/05/23/carl-sagan-the-burden-of-skepticism/" title="Carl Sagan on Mastering the Vital Balance of Skepticism and Openness">questo articolo</a> in cui viene citato Carl Sagan, probabilmente il migliore divulgatore scientifico mai vissuto sul pianeta Terra.</p>

<p>Sagan dice, con parole molto più efficaci delle mie, che esiste un delicato equilibrio fra scetticismo ed apertura mentale nell’affrontare ipotesi e idee. Leggendo il suo ragionamento mi sono reso conto che questa faccenda del giusto equilibrio è applicabile a tanti campi della conoscenza umana, fra cui l’Ingegneria del Software.</p>

<!-- more -->


<p>Quello dei computer e della tecnologia è un mondo in cui ci si muove alla velocità della luce. Un anno nel mondo della software è l’equivalente di un’era geologica. Linguaggi, framework, database e paradigmi nascono a ritmi impressionanti. E molti muoiono altrettanto rapidamente.</p>

<p>La selezione naturale della specie si applica anche al mondo della tecnologia, con la differenza che il marketing spesso riesce a tenere artificialmente in vita dinosauri che la natura avrebbe spazzato via da tempo.</p>

<p>La mia personale filosofia riguardo l’innovazione consiste nel tenere occhi e mente aperti in modo da poter captare nuovi input che mi permettono di lavorare meglio, più velocemente e con meno fatica. Allo stesso tempo, lo scetticismo deve intervenire per scremare la fuffa e le iperbole dell’hype.</p>

<p>Il fatto che la vera innovazione oggi avviene prevalentemente nel mondo open source, ci permette di poter sperimentare con una libertà che fino a qualche anno fa non era immaginabile.</p>

<p>Se mi sembra di aver individuato uno strumento utile (che sia un linguaggio, un framework o la qualunque), posso scaricarlo, provarlo, giocarci liberamente per tutto il tempo che serve a farmene un’idea concreta e capire se vale la pena investire più tempo per imparare qualcosa di nuovo che domani mi aiuterà a lavorare meglio e tornare a casa prima la sera. Ok, forse non riuscirò a tornare a casa prima la sera ma… ci siamo capiti.</p>

<p>Per questo preciso motivo ho imparato a diffidare di chi parla di strumenti che non conosce. Se dici che il mondo NoSQL è una ciofeca perché non esiste supporto alle transazioni e non hai mai provato a studiare neanche un MongoDB, mi dispiace ma il tuo argomento è fuffa allo stato puro esattamente come è fuffa l’hype di un commerciale Oracle. E magari nel mio progetto le transazioni neanche servono.</p>

<p>Personalmente tengo in considerazione soltanto il parere di chi ha lavorato con certe tecnologie ed ha un minimo di esperienza pratica in un certo campo.</p>

<p>La definizione dell’architettura di un progetto software è una cosa in cui le chiacchiere da bar e/o da commerciale non trovano posto. Senza contare che ogni progetto è un mondo a sé e richiede un’analisi specifica in cui bisogna saper bilanciare giuste dosi di apertura mentale ad altrettante di sano scetticismo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cosa crea una buona cultura ingegneristica?]]></title>
    <link href="http://mcaserta.github.com/blog/2012/05/20/cosa-crea-una-buona-cultura-ingegneristica/"/>
    <updated>2012-05-20T14:47:00+02:00</updated>
    <id>http://mcaserta.github.com/blog/2012/05/20/cosa-crea-una-buona-cultura-ingegneristica</id>
    <content type="html"><![CDATA[<p>Stavo leggendo <a href="http://www.quora.com/What-makes-a-good-engineering-culture/answer/Edmond-Lau" title="What makes a good engineering culture?">la risposta di Edmond Lau’s alla domanda “Cosa crea una buona cultura ingegneristica?”</a></p>

<p>Tutti i punti esposti sono molto interessanti e validi. Tuttavia, nella mia esperienza, due punti sono prerequisito essenziale per il senso più ampio del discorso:</p>

<!-- more -->




<ul>
<li><strong>20%:</strong> <p>considerare l’ingegneria del software come una scienza puramente tecnica, se non addirittura meccanica (ho il problema X, le soluzioni conosciute sono Y e Z, ne scelgo una e buonanotte) è, lasciamelo dire, una grossa cazzata. Qualsiasi problema tecnico ha bisogno di grosse dosi di creatività per essere risolto al meglio. Quando si pensa alla creatività, viene in mente il mondo della musica, della pittura, dell’arte più in generale. Ma cos’è l’arte se non lo studio approfondito della teoria e della pratica di un determinato mestiere? La creatività non è nulla di magico e/o artistico. La creatività è la capacità di entrare nel dettaglio di ogni singolo elemento di un problema e, allo stesso tempo, avere una visione dall’alto che permetta di vedere il quadro nel suo insieme. È la capacità di vedere le foglie degli alberi ma anche la foresta. Non lo dico io, lo dice gente che ha studiato l’argomento.</p> 

<p>Dedicare una piccola percentuale stabilita dell’orario lavorativo alla soluzione di problemi che non hanno nulla a che vedere con i progetti su cui si sta lavorando permette di creare le condizioni per la serendipità che si verifica quando idee e campi apparentemente scollegati fra loro si incrociano.</p>

<p>L’ingegnere che sta lavorando nel 20% del suo tempo al progetto di sua invenzione, scoprirà sicuramente una serie di idee che troveranno applicazione nei progetti per cui è pagato. Senza contare il fatto che una persona che si sente creativa nel suo lavoro (secondo la definizione di creatività che ho appena dato) è una persona motivata, lavora meglio e raggiunge gli obiettivi in 1/4 del tempo di una persona non motivata.</p></li>

<li><strong>costruire una cultura di studio e miglioramento continuo:</strong> <p>se fai l’ingegnere del software con lo stesso spirito con cui alcune persone (e sottolineo alcune, per fortuna) affrontano un lavoro al ministero, faresti meglio a cambiare mestiere. È impensabile lavorare con i computer e non essere costantemente aggiornato sugli sviluppi degli strumenti a nostra disposizione. Per strumenti intendo linguaggi di programmazione, sistemi operativi, IDE, librerie software, ecc. Se pensi che la tua conoscenza attuale ti permetterà di sopravvivere in questo mestiere per più di un anno, lasciamelo dire, sei un bel cazzone: ti troverai molto presto a dover cercare un nuovo datore di lavoro. Se la tua azienda non promuove lo studio e l’approfondimento delle nuove tecnologie (questo è prima di tutto un grosso problema per l’azienda stessa, forse faresti meglio a cercarne una più illuminata), fallo da solo, senza aspettare che arrivi qualcuno a dirti cosa devi fare per migliorare.</p>

<p>Nel piccolo della mia esperienza, ho sempre cercato di studiare nei tempi morti fra un progetto e un altro o quando un progetto era in una fase più tranquilla (eventualità piuttosto rara, ma non impossibile). Oggi, con le conoscenze accumulate in ore e ore di studio costante nei tempi morti (e nel tempo libero), dal punto di vista tecnico, gli faccio un mazzo così a tutti i colleghi che non hanno abbracciato la filosofia del miglioramento costante e continuo. Chiedilo a quelli che ,in ufficio, quando devono risolvere un problema, si rivolgono a me e alle persone che adottano la mia stessa filosofia.</p></li>
</ul>


<p>Un punto che non è presente nella risposta di Edmond Lau è il valore della condivisione. Noi italiani siamo particolarmente stronzi da questo punto di vista perché ci hanno insegnato che quando impariamo una cosa nuova, è bene tenercela per noi perché questo ci dà un vantaggio sugli altri. Vorrei solo citare due argomenti a controbattere questo tipo di mentalità:</p>

<ul>
<li><strong>l’argomento Linus Torvalds:</strong> pensi che Linus sarebbe Linus e Linux sarebbe Linux se Linus avesse pensato: “questo codice è proprio fico, me lo terrò tutto per me perché questo mi darà un vantaggio nella vita”?</li>
<li><strong>l’argomento Sara Lando:</strong> quando ho iniziato a interessarmi di fotografia digitale, c’era <a href="http://www.saralando.com/blog/" title="Il Blog di Sara Lando">questo blog</a> in cui Sara pubblicava degli articoli sulla Ghettofotografia, che Sara stessa definisce, con l’understatement che le è tipico, come “un paio di biechissimi barbatrucchi per fare meno fatica quando si ha a che fare con attrezzatura limitata”. Ora non riesco a ritrovare il link al post ma, sostanzialmente, un bel giorno Sara ha scritto che per lei, scrivere di Ghettofotografia è il modo migliore per imparare cose nuove perché ogni volta che descrive come risolve un certo problema, ci sono almeno 2/3 persone che commentano descrivendo modi più paraculi ed efficaci dei suoi. E Sara è il tipo di persona che ha pubblicato un corso di fotografia digitale per il Corriere della Sera.</li>
</ul>


<p>Con questo credo di averti tediato abbastanza.</p>
]]></content>
  </entry>
  
</feed>
